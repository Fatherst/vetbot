import re
import random
import logging
from typing import NamedTuple
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.filters import Command, Filter
from django.conf import settings
from integrations.easysms.methods import easy_send_code
from client_auth import keyboards
from .models import Client

logger = logging.getLogger(__name__)
client_router = Router()


class PhoneFilter(Filter):
    mask = r"([78][0-9]{10})"

    async def __call__(self, message: types.Message) -> bool:
        if message.text:
            row_phone_number = message.text
        else:
            row_phone_number = message.contact.phone_number
        phone_number = re.sub(r"\D", "", row_phone_number)
        phone_mask = re.compile(self.mask)
        return re.fullmatch(phone_mask, phone_number)


class PhoneStates(StatesGroup):
    phone = State()
    code = State()


class AuthResult(NamedTuple):
    greeting: str
    new_client: bool
    reply_markup: types.InlineKeyboardMarkup


async def prepare_authentication_response(
    user_id: int,
) -> AuthResult:
    client = await Client.objects.filter(tg_chat_id=user_id).afirst()
    if client:
        if client.first_name and client.middle_name and client.last_name:
            greeting = (f"<b>{client.last_name} {client.first_name} {client.middle_name}</b>, "
                        f"–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ, "
                        f"—á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
                        f"‚§µ</b>")
        else:
            greeting = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ</b>"
        return AuthResult(
            greeting,
            False,
            await keyboards.main_menu(bool(client.enote_id)),
        )
    else:
        return AuthResult(
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –î—Ä—É–∑—å—è üêà</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏. "
            "–î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
            "—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ Telegram, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é",
            True,
            await keyboards.get_contact(),
        )


@client_router.message(Command("start"))
async def send_greeting(message: types.Message, state: FSMContext):
    await state.clear()
    result = await prepare_authentication_response(message.from_user.id)
    await message.answer(
        text=result.greeting,
        reply_markup=result.reply_markup,
    )
    if result.new_client:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        await state.set_state(PhoneStates.phone)


async def process_client_phone(
    state: FSMContext, user_phone_number: str, message: types.Message
):
    """–ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è –≤–æ–æ–±—â–µ —É–±—Ä–∞–ª, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    black_list = []
    user_phone_number = re.sub(r"\D", "", user_phone_number)
    client = await Client.objects.filter(
        phone_number__contains=user_phone_number[1:]
    ).afirst()
    if client in black_list:
        await message.answer(
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        )
        await state.clear()
    else:
        logger.info(f"USE_EASY_SMS = {settings.USE_EASY_SMS}")
        if settings.USE_EASY_SMS:
            code = random.randrange(1001, 9999)
            code_sent = await easy_send_code(code, "7" + user_phone_number[1:])
            text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n" \
                   "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–∑ 4-—Ö —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"
        else:
            code = 1
            code_sent = True
            text = f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–º—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∫–æ–¥ {code}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ"
        logger.info(f"code = {code}")
        if code_sent:
            await state.update_data(code=code)
            await state.update_data(phone_number=user_phone_number)
            await message.answer(
                text=text,
                reply_markup=types.ReplyKeyboardRemove(),
            )
            await state.set_state(PhoneStates.code)
        else:
            await message.answer(
                text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
                "–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                reply_markup=await keyboards.get_contact(),
            )


@client_router.message(PhoneStates.phone, F.text, PhoneFilter())
async def handle_correct_text_contact(message: types.Message, state: FSMContext):
    phone_number = re.sub(r"\D", "", message.text)
    await process_client_phone(
        state=state,
        user_phone_number=phone_number,
        message=message,
    )


@client_router.message(
    PhoneStates.phone, PhoneFilter(), F.content_type.in_({"contact"})
)
async def handle_contact(message: types.Message, state: FSMContext):
    await process_client_phone(
        state=state,
        user_phone_number=message.contact.phone_number,
        message=message,
    )


@client_router.message(PhoneStates.phone, F.text, lambda x: x != PhoneFilter())
async def handle_wrong_text_contact(message: types.Message):
    await message.reply(
        text="–ü—Ä–∏—à–ª–∏,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start"
    )


@client_router.message(
    PhoneStates.phone, lambda x: x != PhoneFilter(), F.content_type.in_({"contact"})
)
async def handle_wrong_contact(message: types.Message):
    await message.reply(
        text="–ü—Ä–∏—à–ª–∏,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start"
    )


@client_router.message(PhoneStates.code, F.text)
async def handle_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    logger.info(f"user data = {str(data)}")
    if str(data["code"]) == message.text:
        defaults = {
            "tg_chat_id": message.from_user.id,
            "phone_number": data["phone_number"],
        }
        client, created = await Client.objects.aupdate_or_create(
            phone_number__contains=data["phone_number"][1:], defaults=defaults
        )
        await state.clear()
        await message.answer(
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞",
            reply_markup=await keyboards.main_menu(bool(client.enote_id)),
        )
    else:
        await message.answer(
            text="–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
        )


@client_router.callback_query(F.data == "main_menu")
async def main_menu(callback: types.CallbackQuery):
    result = await prepare_authentication_response(callback.from_user.id)
    await callback.message.edit_text(
        text=result.greeting,
        reply_markup=result.reply_markup,
    )
