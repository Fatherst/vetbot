from aiogram import types
from .keyboards import (
    get_contact,
    get_user_main_menu,
)
from aiogram import Bot
from .models import Client
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.filters import Command, and_f
import re
import random


client_router = Router()


class FSMPhone(StatesGroup):
    phone = State()
    code = State()


@client_router.message(Command("start"))
async def command_start(message: types.Message, bot: Bot, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    """
    await state.clear()
    user_id = message.from_user.id
    client = await Client.objects.filter(tg_chat_id=user_id).afirst()
    if client:
        name = "–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        if client.first_name is not None:
            name = client.first_name
        await bot.send_message(
            message.from_user.id,
            text=f"*{name}*, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ",
            reply_markup=get_user_main_menu(),
            parse_mode="Markdown",
        )
    else:
        greeting = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ *–î—Ä—É–∑—å—è* üêà\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –í–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏. "
            "–î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞,–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,"
            " —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ Telegram, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é"
        )
        await bot.send_message(
            message.from_user.id,
            text=greeting,
            reply_markup=get_contact(),
            parse_mode="Markdown",
        )
        await state.set_state(FSMPhone.phone)


async def client_get_or_create(
    state: FSMContext, code, user_phone_number, message: types.Message
):
    await state.update_data(code=code)
    await state.update_data(phone_number=user_phone_number)
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–∑ 4-—Ö —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω",
        reply_markup=types.ReplyKeyboardRemove(),
    )
    await state.set_state(FSMPhone.code)


@client_router.message(FSMPhone.phone, and_f(F.text))
async def fsm_number_get(message: types.Message, state: FSMContext, bot: Bot):
    code = 1
    # code = random.randrange(1001, 9999)
    black_list = []
    if re.match("[+]+?[7](\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})", f"{message.text}"):
        await bot.send_message(
            message.from_user.id,
            text="–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        user_phone_number = message.text
        client = await Client.objects.filter(phone_number=user_phone_number).afirst()
        if client and client not in black_list:
            await client_get_or_create(
                state=state,
                code=code,
                user_phone_number=user_phone_number,
                message=message,
            )
        elif client in black_list:
            await bot.send_message(
                message.from_user.id,
                text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
            )
        else:
            await client_get_or_create(
                state=state,
                code=code,
                user_phone_number=user_phone_number,
                message=message,
            )
    elif message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await bot.send_message(message.from_user.id, text="–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    elif not re.match("[+]+?[7](\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})", f"{message.text}"):
        await message.reply(
            text='–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–û—Ç–º–µ–Ω–∞", –ª–∏–±–æ /start'
        )


@client_router.message(FSMPhone.phone, and_f(F.content_type.in_({"contact"})))
async def recieve_contact(message: types.Message, bot: Bot, state: FSMContext):
    code = 1
    black_list = []
    phone_number = message.contact.phone_number
    client = await Client.objects.filter(phone_number=phone_number).afirst()
    if client and client not in black_list:
        await client_get_or_create(
            state=state,
            code=code,
            user_phone_number=phone_number,
            message=message,
        )
    elif client in black_list:
        await bot.send_message(
            message.from_user.id,
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        )
    else:
        await client_get_or_create(
            state=state,
            code=code,
            user_phone_number=phone_number,
            message=message,
        )


@client_router.message(FSMPhone.code)
async def fsm_receive_code(message: types.Message, state: FSMContext, bot: Bot):
    if message.content_type == "text":
        data = await state.get_data()
        data["code"] = str(data["code"])
        if data["code"] == message.text:
            client = await Client.objects.filter(
                phone_number=data["phone_number"]
            ).afirst()
            if not client:
                client = await Client.objects.acreate(phone_number=data["phone_number"])
                await client.asave()
            client.tg_chat_id = message.from_user.id
            await client.asave()
            await state.clear()
            await bot.send_message(
                message.from_user.id,
                text="–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞",
                reply_markup=get_user_main_menu(),
            )
        elif message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
            await bot.send_message(
                message.from_user.id, text="–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
            )
            await state.clear()
        elif data["code"] != message.text:
            await bot.send_message(
                message.from_user.id,
                text="–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ '–û—Ç–º–µ–Ω–∞' –∏–ª–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
            )
    else:
        await bot.send_message(
            message.from_user.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ–¥ —Ç–µ–∫—Å—Ç–æ–º"
        )
