import random
from sentry_sdk import capture_message
from bot.bot_init import bot, logger
from bot.states import AuthStates
from client_auth import keyboards
from client_auth.models import Client
from django.conf import settings
from integrations.easysms import methods as easysms
from telebot import apihelper, types
from bot.classes import Phone
from appointment.text_generation import get_greeting


def send_old_client_greeting_message(client: Client, message: types.Message):
    if client.enote_id:
        text = (
            f"<b>{get_greeting(client)}</b>, –≤—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ! "
            "–ù–æ —É –Ω–∞—Å –µ—â–µ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –¥–ª—è –≤–∞—Å üêæ\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µÔ∏è"
        )
    else:
        text = (
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏\n\nüòî–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µÔ∏è\n\n"
            "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º.\n- –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.\n- "
            "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π "
            "–∫–æ–º–∞–Ω–¥—ã."
        )
    bot.send_message(
        chat_id=message.chat.id, text=text, reply_markup=keyboards.main_menu(client)
    )


def send_new_client_greeting_message(message: types.Message):
    text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π —Ü–µ–Ω—Ç—Ä <b>–î—Ä—É–∑—å—è</b>! –î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. –î–ª—è "
        "—ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º.</b>"
    )

    bot.send_message(
        chat_id=message.chat.id, text=text, reply_markup=keyboards.get_contact()
    )


@bot.message_handler(commands=["start"])
def process_start_command(message: types.Message):
    bot.delete_state(user_id=message.chat.id)
    try:
        client = Client.objects.get(tg_chat_id=message.chat.id)
    except Client.DoesNotExist:
        send_new_client_greeting_message(message)
        bot.set_state(user_id=message.chat.id, state=AuthStates.phone)
    else:
        send_old_client_greeting_message(client, message)


def send_sms_message(user_id: int, formatted_phone: str):
    code = random.randrange(1001, 9999)
    code_message = f"–¢–≤–æ–π –∫–æ–¥ - {code}"
    capture_message(code_message)

    try:
        easysms.send_message(code_message, formatted_phone)
        text = "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–∑ 4-—Ö —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥–µ—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω."
    except Exception as e:
        logger.exception(e)
        text = (
            "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–ü—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, "
            "–º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        )
    else:
        bot.set_state(user_id=user_id, state=AuthStates.code)
        bot.add_data(user_id=user_id, code=code, phone=formatted_phone)
    bot.send_message(
        chat_id=user_id, text=text, reply_markup=types.ReplyKeyboardRemove()
    )


def send_non_sms_message(user_id: int, formatted_phone: str):
    code = 1
    text = f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–º—Å –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∫–æ–¥ {code}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ"

    bot.set_state(user_id=user_id, state=AuthStates.code)
    bot.add_data(user_id=user_id, code=code, phone=formatted_phone)

    bot.send_message(
        chat_id=user_id, text=text, reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(
    state=AuthStates.phone, phone_is_valid=True, content_types=["text", "contact"]
)
def process_valid_phone(message: types.Message):
    phone = message.text if message.text else message.contact.phone_number
    formatted_phone = Phone.format(phone)

    if settings.USE_EASYSMS:
        send_sms_message(message.chat.id, formatted_phone)
    else:
        send_non_sms_message(message.chat.id, formatted_phone)


@bot.message_handler(
    state=AuthStates.phone, phone_is_valid=False, content_types=["text", "contact"]
)
def process_not_valid_phone(message: types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
    )


@bot.message_handler(state=AuthStates.code)
def process_code(message: types.Message):
    with bot.retrieve_data(user_id=message.chat.id) as data:
        code = str(data["code"])
        phone = data["phone"]
    if code == message.text:
        defaults = {
            "tg_chat_id": message.chat.id,
            "phone_number": phone,
        }
        client, created = Client.objects.update_or_create(
            phone_number=phone, defaults=defaults
        )
        bot.delete_state(user_id=message.chat.id)
        if client.enote_id:
            text = (
                f"<b>{get_greeting(client)}</b>,–≤—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ! "
                "–ù–æ —É –Ω–∞—Å –µ—â–µ –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –¥–ª—è –≤–∞—Å üêæ\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µÔ∏è"
            )
        else:
            text = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–∞—Å –Ω–∞–π—Ç–∏ üòî\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
                "‚§µÔ∏è\n\n"
                "–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –í—ã –º–æ–∂–µ—Ç–µ:\n- –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º.\n- –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.\n- "
                "–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π "
                "–∫–æ–º–∞–Ω–¥—ã."
            )
        reply_markup = keyboards.main_menu(client)
    else:
        text = (
            "–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start, "
            "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"
        )
        reply_markup = None

    bot.send_message(chat_id=message.chat.id, text=text, reply_markup=reply_markup)


@bot.callback_query_handler(func=lambda c: c.data == "main_menu")
def process_main_menu_callback(call: types.CallbackQuery):
    try:
        bot.delete_message(
            chat_id=call.message.chat.id, message_id=call.message.message_id
        )
    except apihelper.ApiTelegramException:
        pass
    process_start_command(call.message)
