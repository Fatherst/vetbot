from aiogram import types
from .keyboards import (
    get_contact,
    user_main_menu,
    not_enote_main_menu,
    back,
    back_or_loyalty,
    back_or_loyalty_or_recomend,
)
from .models import Client
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F
from aiogram.filters import Command, Filter
import re
import random
import aiohttp
from django.conf import settings
from aiohttp.client_exceptions import ClientResponseError
import logging


logger = logging.getLogger(__name__)
client_router = Router()


class PhoneFilter(Filter):
    mask = r"(7[0-9]{10})"

    async def __call__(self, message: types.Message) -> bool:
        row_phone_number = message.text
        phone_number = re.sub(r"\D", "", row_phone_number)
        phone_mask = re.compile(self.mask)
        return re.fullmatch(phone_mask, phone_number)


class PhoneStates(StatesGroup):
    phone = State()
    code = State()


async def get_user_data(user_id: int) -> tuple[str, str, types.InlineKeyboardMarkup]:
    client = await Client.objects.filter(tg_chat_id=user_id).afirst()
    if client:
        if client.first_name:
            greeting = f"{client.first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"
        else:
            greeting = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é"
        if client.enote_id:
            return greeting, "<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ</b>", user_main_menu()
        else:
            return (
                greeting,
                "<b>–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ</b>",
                not_enote_main_menu(),
            )
    else:
        return (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –î—Ä—É–∑—å—è üêà</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏. "
            "–î–ª—è —ç—Ç–æ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
            "—É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ Telegram, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é",
            "",
            get_contact(),
        )


@client_router.message(Command("start"))
async def send_greeting(message: types.Message, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    """
    await state.clear()
    greeting, text, reply_markup = await get_user_data(message.from_user.id)
    await message.answer(
        text=f"{greeting}\n\n{text}",
        reply_markup=reply_markup,
    )
    if text == "":  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        await state.set_state(PhoneStates.phone)


async def process_client_phone(
    state: FSMContext, user_phone_number: str, message: types.Message
):
    """–ü—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è –≤–æ–æ–±—â–µ —É–±—Ä–∞–ª, —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
    black_list = []
    client = await Client.objects.filter(phone_number=user_phone_number).afirst()
    if client not in black_list:
        # code = random.randrange(1001, 9999)
        code = 1
        await state.update_data(code=code)
        await state.update_data(phone_number=user_phone_number)
        await message.answer(
            text="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–∑ 4-—Ö —Ü–∏—Ñ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–¥—ë—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω",
            reply_markup=types.ReplyKeyboardRemove(),
        )
        await state.set_state(PhoneStates.code)
    else:
        await message.answer(
            text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.",
        )
        await state.clear()


@client_router.message(PhoneStates.phone, F.text, PhoneFilter())
async def handle_correct_text_contact(message: types.Message, state: FSMContext):
    phone_number = re.sub(r"\D", "", message.text)
    await process_client_phone(
        state=state,
        user_phone_number=phone_number,
        message=message,
    )


@client_router.message(PhoneStates.phone, F.text, lambda x: x != PhoneFilter())
async def handle_wrong_text_contact(message: types.Message):
    await message.reply(
        text="–ü—Ä–∏—à–ª–∏,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /start"
    )


@client_router.message(PhoneStates.phone, F.content_type.in_({"contact"}))
async def handle_contact(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    phone_number = re.sub(r"\D", "", phone_number)
    await process_client_phone(
        state=state,
        user_phone_number=phone_number,
        message=message,
    )


@client_router.message(PhoneStates.code, F.text)
async def handle_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if str(data["code"]) == message.text:
        await Client.objects.aupdate_or_create(
            phone_number=data["phone_number"], tg_chat_id=message.from_user.id
        )
        client = await Client.objects.filter(phone_number=data["phone_number"]).afirst()
        await state.clear()
        if client.enote_id:
            reply_markup = user_main_menu()
        else:
            reply_markup = not_enote_main_menu()
        await message.answer(
            text="–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞",
            reply_markup=reply_markup,
        )
    else:
        await message.answer(
            text="–ö–æ–¥ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
        )


@client_router.callback_query(F.data == "back")
async def main_menu(callback: types.CallbackQuery):
    greeting, _, reply_markup = await get_user_data(callback.from_user.id)
    await callback.message.edit_text(
        text=f"{greeting}\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ",
        reply_markup=reply_markup,
    )


@client_router.callback_query(F.data == "bonuses")
async def bonuses_program(callback: types.CallbackQuery):
    client = await Client.objects.filter(tg_chat_id=callback.from_user.id).afirst()
    query_params = {
        "client_enote_id": client.enote_id,
        "department_enote_id": "9c0d9196-5a62-4508-ad92-e3ade9b247d8",
    }
    headers = {"apikey": settings.APIKEY, "Authorization": settings.BASIC_AUTH}
    balance = None
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                "https://ru.enote.link/79c0973a-3b89-11ec-f988-12896acfa599-e5/hs/api/v1/balance",
                params=query_params,
                headers=headers,
            ) as resp:
                resp.raise_for_status()
                body = await resp.json()
                balance = body["totalBalanceClient"]
    except ClientResponseError as error:
        logger.error(error)
    if balance:
        msg = (
            f"–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n\n<b>–ë–†–û–ù–ó–û–í–´–ô</b>\n\n–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ"
            f" 3% –±–æ–Ω—É—Å–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏ —Å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –≤ –ö–ª–∏–Ω–∏–∫–µ —Å—É–º–º—ã!\n\n–ë–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞: {balance} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ –¥–æ 20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏!\n\n1 –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–ª = 1 —Ä—É–±–ª—å"
        )
        reply_markup = back_or_loyalty_or_recomend()
    else:
        msg = "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á—ë—Ç–∞, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∫–ª–∏–Ω–∏–∫–∏"
        reply_markup = back_or_loyalty()
    await callback.message.edit_text(
        text=f"<b>{callback.from_user.first_name}</b>, {msg}",
        reply_markup=reply_markup,
    )


@client_router.callback_query(F.data == "loyalty")
async def loyalty_program(callback: types.CallbackQuery):
    await callback.message.edit_text(
        text="–í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ö–ª–∏–Ω–∏–∫–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç –ö–ª–∏–µ–Ω—Ç–∞–º –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã (–∫–µ—à–±—ç–∫), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏.\n\n 1 –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–ª = 1 —Ä—É–±–ª—å\n\n–†–∞–∑–º–µ—Ä –∫–µ—à–±—ç–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ö–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n\n–ë—Ä–æ–Ω–∑–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –∫–µ—à–±—ç–∫ 3%\n\n–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ 0 - 9999 —Ä—É–±\n\n–°–µ—Ä–µ–±—Ä—è–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –∫–µ—à–±—ç–∫ 5%\n\n–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ 10000 - 29999 —Ä—É–±\n\n–ó–æ–ª–æ—Ç–æ–π —Å—Ç–∞—Ç—É—Å - –∫–µ—à–±—ç–∫ 8%\n\n–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ 30000 - 49999 —Ä—É–±\n\n–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å - –∫–µ—à–±—ç–∫ 10%\n\n–ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ —Å—É–º–º—É –±–æ–ª–µ–µ 50000 —Ä—É–±\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ –¥–æ 10% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ —Ö–∏—Ä—É—Ä–≥–∏–∏ –∏ –¥–æ 20% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ —Ç–µ—Ä–∞–ø–∏–∏ –ö–ª–∏–Ω–∏–∫–∏!\n\n–ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ, –ö–ª–∏–Ω–∏–∫–∞ –ø–æ–¥–∞—Ä–∏—Ç 1000 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ö–ª–∏–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–∏ –Ω–∞—à—É –ö–ª–∏–Ω–∏–∫—É.",
        reply_markup=back(),
    )
