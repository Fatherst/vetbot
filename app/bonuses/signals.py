import json
from django.dispatch import receiver
from django.db.models.signals import post_save
from bonuses.models import BonusAccrual, Recommendation, Program
from bonuses.tasks import accrual_bonuses_by_enote
from bot.bot_init import bot, logger
from bonuses import keyboards


@receiver(post_save, sender=BonusAccrual)
def accrue_bonuses(created, instance, **kwargs):
    if created:
        accrual_bonuses_by_enote.delay(instance.id)


@receiver(post_save, sender=BonusAccrual)
def send_notification(instance, **kwargs):
    if instance.accrued and instance.tracker.has_changed("accrued"):
        client = instance.client
        name = client.full_name if client.full_name else "–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç"

        REASONS = {
            "REGISTRATION": "–ë–æ–Ω—É—Å –∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –î—Ä—É–∑—å—è üêà!",
            "BIRTHDAY": "–ë–æ–Ω—É—Å –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞!",
            "REFERAL_GETTER": "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–ª–∏–Ω–∏–∫—É!",
            "REFERAL_SETTER": "–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –≤ –∫–ª–∏–Ω–∏–∫—É –∫–ª–∏–µ–Ω—Ç–∞!",
            "MANUAL": "–í–∞–º –±—ã–ª–∏ –≤—Ä—É—á–Ω—É—é –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã!",
        }
        DEFAULT_REASON = "–í–∞–º –±—ã–ª–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã!"
        reason_message = REASONS.get(instance.reason, DEFAULT_REASON)

        text = (
            f"<b>{name}</b>, –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {instance.amount} –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤\n\n–í—ã –º–æ–∂–µ—Ç–µ "
            f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –≤ –Ω–∞—à–µ–º –¶–µ–Ω—Ç—Ä–µ\n\n1 –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–ª = 1 "
            f"—Ä—É–±–ª—å\n\n{reason_message}"
        )
        bot.send_message(
            chat_id=client.tg_chat_id, text=text, reply_markup=keyboards.more_bonuses()
        )


@receiver(post_save, sender=Recommendation)
def accrue_recommendation_bonus(instance, **kwargs):
    if instance.issued and instance.tracker.has_changed("issued"):
        try:
            active_program = Program.objects.get(is_active=True)
        except Program.DoesNotExist as error:
            instance.issued = False
            instance.save()
            logger.error(error)
        else:
            BonusAccrual.objects.create(
                client=instance.client,
                amount=active_program.new_client_bonus_amount,
                reason="REFERAL_SENDER",
            )
