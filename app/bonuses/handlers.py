import random
import string

from bonuses import keyboards
from bonuses.models import Program, Recommendation
from bot.bot_init import bot
from client_auth.models import Client
from telebot import types
from appointment.text_generation import get_greeting


def create_program_description(program: Program) -> str:
    text = (
        "–í —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –ö–ª–∏–Ω–∏–∫–∞ –Ω–∞—á–∏—Å–ª—è–µ—Ç –ö–ª–∏–µ–Ω—Ç–∞–º –±–æ–Ω—É—Å–Ω—ã–µ "
        "–±–∞–ª–ª—ã (–∫–µ—à–±—ç–∫), –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏.\n\n"
        f"<b>{program.description}</b>\n\n–†–∞–∑–º–µ—Ä –∫–µ—à–±—ç–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ "
        "–ö–ª–∏–µ–Ω—Ç–∞ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:"
    )
    return text


def generate_statuses_description(program: Program) -> str:
    program_description = create_program_description(program)

    status_description = ""
    for status in program.statuses.order_by("start_amount"):
        if status.end_amount:
            status_description += (
                f"\n\n<b>{status.name} —Å—Ç–∞—Ç—É—Å</b> - –∫–µ—à–±—ç–∫ {status.cashback_amount}%\n<i>–ö–ª–∏–µ–Ω—Ç "
                f"–æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ {status.start_amount} - {status.end_amount} —Ä—É–±</i>"
            )
        else:
            status_description += (
                f"\n\n<b>{status.name} —Å—Ç–∞—Ç—É—Å</b> - –∫–µ—à–±—ç–∫ {status.cashback_amount}%\n<i>–ö–ª–∏–µ–Ω—Ç "
                f"–æ–ø–ª–∞—Ç–∏–ª —É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏ –Ω–∞ {status.start_amount} –∏ –±–æ–ª—å—à–µ —Ä—É–±</i>"
            )

    new_client_description = (
        f"\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ –¥–æ <b>{program.payment_percent}%</b> —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª—é–±–æ–π "
        "—É—Å–ª—É–≥–∏.\n\n–ö—Ä–æ–º–µ —ç—Ç–æ–≥–æ, "
        f"–º—ã –ø–æ–¥–∞—Ä–∏–º –≤–∞–º <b>{program.new_client_bonus_amount}</b> –±–æ–Ω—É—Å–Ω—ã—Ö "
        "–±–∞–ª–ª–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—à—É –ö–ª–∏–Ω–∏–∫—É.\n\nüíô"
    )
    return program_description + status_description + new_client_description


@bot.callback_query_handler(func=lambda c: c.data == "bonuses")
def bonus_program(call: types.CallbackQuery):
    program = Program.objects.filter(is_active=True).first()
    client = Client.objects.get(tg_chat_id=call.from_user.id)

    balance_info = client.balance
    balance_message = (
        f"–ë–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á–µ—Ç–∞:<b> {balance_info.bonus_balance} "
        "–±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤.</b>\n\n"
    )
    status_message = ""
    payment_message = (
        f"–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ <b>{program.payment_percent}%</b> –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ "
        "—É—Å–ª—É–≥ –ö–ª–∏–Ω–∏–∫–∏!\n\n"
    )
    status = program.retrieve_status(balance_info.money_spent)
    if status:
        status_message = (
            f"–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏:\n\n<b>{status.name}</b>"
            f"\n\n–≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>{status.cashback_amount}%</b> –±–æ–Ω—É—Å–Ω—ã–º–∏ "
            "–±–∞–ª–ª–∞–º–∏ —Å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–π –≤ –ö–ª–∏–Ω–∏–∫–µ —Å—É–º–º—ã!\n\n"
        )
    text = (
        f"<b>{get_greeting(client)}</b>, {status_message}{balance_message}{payment_message}"
        f"<b>{program.description}</b>"
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=keyboards.bonuses_menu(),
    )


@bot.callback_query_handler(func=lambda c: c.data == "loyalty")
def program_status(call: types.CallbackQuery):
    client = Client.objects.get(tg_chat_id=call.from_user.id)
    program = Program.objects.filter(is_active=True).first()

    if client.enote_id:
        reply_markup = keyboards.back_to_bonuses()
    else:
        reply_markup = keyboards.back_to_main_menu()

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=generate_statuses_description(program),
        reply_markup=reply_markup,
    )


def create_promocode() -> str:
    while True:
        SIZE = 6
        promocode = "".join(
            random.choices(string.ascii_uppercase + string.digits, k=SIZE)
        )
        is_unique = not Recommendation.objects.filter(promocode=promocode).exists()
        if is_unique:
            return promocode


@bot.callback_query_handler(
    func=lambda c: c.data in ["recommend_from_bonuses", "recommend_from_menu"]
)
def get_promocode(call: types.CallbackQuery):
    client = Client.objects.get(tg_chat_id=call.from_user.id)
    program = Program.objects.filter(is_active=True).first()

    promocode = create_promocode()
    Recommendation.objects.create(promocode=promocode, client=client)

    if call.data == "recommend_from_menu":
        reply_markup = keyboards.back_to_main_menu()
    else:
        reply_markup = keyboards.back_to_bonuses()

    text = (
        f"<b>{get_greeting(client)}</b>, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üíô\n\n–ú—ã –Ω–∞—á–∏—Å–ª–∏–º –í–∞–º "
        f"<b>{program.new_client_bonus_amount}</b> –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é üî•\n\n"
        f"–ò –Ω–∞—á–∏—Å–ª–∏–º {program.new_client_bonus_amount} –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –í–∞—à–µ–º—É –¥—Ä—É–≥—É üçÄ\n\n"
        f"–î–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: {promocode}"
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=reply_markup,
    )
