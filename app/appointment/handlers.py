from appointment import keyboards, models
from appointment.text_generation import get_appointment_description
from bot.bot_init import bot
from client_auth.models import Client
from django.utils import timezone
from telebot import apihelper, types
from appointment.text_generation import get_greeting


@bot.callback_query_handler(func=None, config=keyboards.appointments_factory.filter())
def manage_appointment(call: types.CallbackQuery):
    try:
        bot.delete_message(
            chat_id=call.message.chat.id, message_id=call.message.message_id
        )
    except apihelper.ApiTelegramException:
        pass

    callback_data: dict = keyboards.appointments_factory.parse(callback_data=call.data)
    appointment_id = int(callback_data["appointment_id"])

    appointment = models.Appointment.objects.get(id=appointment_id)
    msg = get_appointment_description(appointment, False)
    bot.send_message(
        chat_id=call.message.chat.id,
        text=msg,
        reply_markup=keyboards.manage_appointment(appointment_id),
    )


@bot.callback_query_handler(func=lambda c: c.data == "appointments")
def appointments_menu(call: types.CallbackQuery):
    client = Client.objects.get(tg_chat_id=call.from_user.id)
    today = timezone.now()
    greeting = get_greeting(client)
    appointments = client.appointments.filter(date_time__gte=today)
    if appointments:
        text = (
            f"<b>{greeting}</b>, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –µ—Å—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–∏–µ–º—ã –≤ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–µ "
            "–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø–∏—Å–∏ ‚§µÔ∏è"
        )
    else:
        text = (
            f"<b>{greeting}</b>, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –≤ –Ω–∞—à–µ–π "
            "–∫–ª–∏–Ω–∏–∫–µ.\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? ‚§µÔ∏è"
        )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=keyboards.appointments(appointments),
    )


@bot.callback_query_handler(func=lambda c: c.data.startswith("approve_appointment"))
def approve_appointment_callback(call: types.CallbackQuery):
    appointment_id = int(call.data.split(":")[-1])

    appointment = models.Appointment.objects.get(id=appointment_id)
    client = appointment.client
    appointment.approved = True
    appointment.save()

    greeting = f"<b>{client.first_name},</b> " if client.first_name else ""

    text = (
        f"{greeting}–í–∞—à –≤–∏–∑–∏—Ç, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞:\n\n"
        f"<b>–î–∞—Ç–∞:</b> {appointment.date_time.strftime('%d.%m.%Y')}\n"
        f"<b>–í—Ä–µ–º—è:</b> {appointment.date_time.strftime('%H:%M')}\n\n"
        "<b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>\n\n\n"
        "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –í–∞—à–∏–º–∏ –±–æ–Ω—É—Å–Ω—ã–º–∏ –±–∞–ª–ª–∞–º–∏ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–µ–º–∞!\n\n"
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏, –≤–∞—à–∏ –î—Ä—É–∑—å—è üíô"
    )
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text,
        reply_markup=keyboards.back_to_main_menu(),
    )
