from .create_bot import bot,dp
from aiogram import types, Dispatcher
from .keyboard import (get_startinline_client, get_identification, get_contact, get_user_received_from_db,
                                             get_user_not_in_db, get_new_appointment, get_admin_code)
from .models import Client
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import re
import random

"""–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–º, –Ω–µ —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–∞–∫—Ç

–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –°–ú–°

/admin –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É

–ê–¥–º–∏–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑—É—é—Ç—Å—è —á–µ—Ä–µ–∑ –ø–æ—á—Ç—É –≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""


class FSMPhone(StatesGroup):
    phone = State()

class FSMadminemail(StatesGroup):
    email = State()

class FSMadmincode(StatesGroup):
    code = State()

async def admin_command(message: types.Message):
    if 'user.tg_id' in 'table_admins':
        await bot.send_message(message.from_user.id, text='–¢—ã –ø–æ–ø–∞–ª –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!')
    else:
        await bot.send_message(message.from_user.id, text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é'
                                                          ' —Ç–µ–±—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        await FSMadminemail.email.set()

async def fsm_admin_email(message: types.Message, state: FSMContext):
    if message.content_type == 'text':
        admin=''
        #async with state.proxy() as data:
        #    data['email'] = message.text
        #    async for adm in 'Admin.objects.filter(email=data[email])':
        #        if adm:
        #            admin = adm
        if admin:
            await bot.send_message(message.from_user.id, text='–í—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n'
                                                              '–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –∫–æ–¥,'
                                                              '–∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏',
                                   reply_markup=get_admin_code())
        else:
            await bot.send_message(message.from_user.id,text='–í—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤')

async def receive_code(callback: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –∫–æ–¥–∞ –∏ –∑–∞–≤–µ–¥–µ–Ω–∏–µ –µ–≥–æ –≤ –ë–î"""
    code = random.randrange(1001,9999)
    """
    admin = Admin.objects.filter(telegramid=callback.from_user.id)
    admin.code = code
    """
    #send_code
    await callback.message.edit_text(text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ –∏–∑ 4-—Ö —Ü–∏—Ñ—Ä, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–Ω—ã–π –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É')
    await FSMadmincode.code.set()

async def command_start(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –Ω–∞–¥–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∫—É
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ"""
    user_id = message.from_user.id
    user = ''
    """async –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ-–¥—Ä—É–≥–æ–º—É ORM –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç(–ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
    async for client in Client.objects.filter(clientTelegramId=user_id):
        if client:
            user = client
    if user is 'admin':
        await bot.send_message(message.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –±–æ—Ç–∞')
    elif user:
        await bot.send_message(message.from_user.id, text=f'*{user.firstName}*, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µ',
                               reply_markup=get_user_received_from_db(),parse_mode="Markdown")
    else:
        await bot.send_message(message.from_user.id,
                               text='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ *–î—Ä—É–∑—å—è* üêà\n–î–ª—è –Ω–∞—á–∞–ª–∞ –º–Ω–µ –Ω—É–∂–Ω–æ –í–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ü—Ä–æ–π—Ç–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.*',
                               reply_markup=get_startinline_client(), parse_mode="Markdown")

async def identification(callback: types.CallbackQuery):
    await callback.message.edit_text(
                          text='–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —ç—Ç–æ–º—É –±–æ—Ç—É'
                               ' –∏–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º?',
                            reply_markup=get_identification())

async def fsm_number(callback: types.CallbackQuery):
    await callback.message.edit_text(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: +7XXXXXXXXX')
    await FSMPhone.phone.set()

async def fsm_number_get(message: types.Message, state:FSMContext):
    if message.content_type == 'text' and re.match('[+]+?[7](\s*\d{3}\s*\d{3}\s*\d{2}\s*\d{2})',
                                                      '+79851471283'):
        user_telegram_id = message.from_user.id
        user = ''
        async with state.proxy() as data:
            phone = message.text
            data['phone'] = phone
            """–§—É–Ω–∫—Ü–∏—è –¥—É–±–ª–∏—Ä—É–µ—Ç —Ç–∞–∫—É—é –∂–µ –≤ number_received"""
            async for client in Client.objects.filter(phoneNumber=phone):
                if client:
                    user = client
                    client.clientTelegramId = user_telegram_id
                    await client.asave()
        await state.finish()
        black_list = []
        if user and user not in black_list:
            await bot.send_message(message.from_user.id,
                                   text=f'*{user.firstName}*, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µÔ∏è',
                                   parse_mode='Markdown', reply_markup=get_user_received_from_db())
        if user and user in black_list:
            await bot.send_message(message.from_user.id,
                                   text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
        if not user:
            await bot.send_message(message.from_user.id,
                                   text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n'
                                        '–í—Å–∫–æ—Ä–µ –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ.\n\n'
                                        '–ü–æ–∫–∞ –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—à –¥–æ—Å—Ç—É–ø –≤ —Å–∏—Å—Ç–µ–º—É, –í—ã –º–æ–∂–µ—Ç–µ:\n- –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.\n- –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                                   reply_markup=get_user_not_in_db())
    elif message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
        await state.finish()
        await bot.send_message(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é')
    else:
        await message.reply(text='–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–û—Ç–º–µ–Ω–∞"')



async def send_number(callback: types.CallbackQuery):
    """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞"""
    await bot.send_message(callback.from_user.id,
                           text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä',
                           reply_markup=get_contact())


async def number_received(message: types.Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, –Ω–µ –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –ª–∏ –æ–Ω –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω –≤–æ–æ–±—â–µ –≤ –ë–î
    –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–π–¥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–¥"""
    user_phone_number = message.contact.phone_number
    user_telegram_id = message.from_user.id
    await bot.send_message(message.from_user.id,text='–°–ø–∞—Å–∏–±–æ! –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    user=''
    async for client in Client.objects.filter(phoneNumber=user_phone_number):
        print(client)
        if client:
            user = client
            client.clientTelegramId = user_telegram_id
            await client.asave()
    black_list = []
    if user and user not in black_list:
        await bot.send_message(message.from_user.id,text=f'*{user.firstName}*, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ‚§µÔ∏è',
                                parse_mode='Markdown',reply_markup=get_user_received_from_db())
    if user and user in black_list:
        await bot.send_message(message.from_user.id,text='–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É—Å–ª—É–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.')
    if not user:
        await bot.send_message(message.from_user.id,text='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n'
                                     '–í—Å–∫–æ—Ä–µ –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—à –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ.\n\n'
                                     '–ü–æ–∫–∞ –Ω–∞—à –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –í–∞—à –¥–æ—Å—Ç—É–ø –≤ —Å–∏—Å—Ç–µ–º—É, –í—ã –º–æ–∂–µ—Ç–µ:\n- –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –Ω–∞—à–µ–º —Ü–µ–Ω—Ç—Ä–µ.\n- –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏.\n- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –Ω–∞—à–µ–π –¥—Ä—É–∂–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.',
                                reply_markup=get_user_not_in_db())

async def new_appointment(callback: types.CallbackQuery):
    await callback.message.edit_text(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n\n'
                                          '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—à–µ–π –∫–ª–∏–Ω–∏–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–∏–∑–∏—Ç–∞.\n\n'
                                          '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? ‚§µÔ∏è',
                                     reply_markup=get_new_appointment())


def register_handlers_client(dp: Dispatcher):
    dp.register_message_handler(command_start, commands=['start'])
    dp.register_callback_query_handler(identification, text='1')
    dp.register_callback_query_handler(send_number, text='share')
    dp.register_message_handler(number_received, content_types=['contact'])
    dp.register_callback_query_handler(new_appointment, text='book')
    dp.register_callback_query_handler(fsm_number, text='write')
    dp.register_message_handler(fsm_number_get, content_types=['text'], state=FSMPhone)
    dp.register_message_handler(admin_command, commands=['admin'])
    dp.register_message_handler(fsm_admin_email, content_types=['text'], state=FSMadminemail)